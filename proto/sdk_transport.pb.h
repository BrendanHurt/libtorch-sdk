// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk_transport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_5ftransport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_5ftransport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_5ftransport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_5ftransport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_5ftransport_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_sdk_5ftransport_2eproto_metadata_getter(int index);
namespace flower_sdk {
class ClientMessage;
struct ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class ClientMessage_Disconnect;
struct ClientMessage_DisconnectDefaultTypeInternal;
extern ClientMessage_DisconnectDefaultTypeInternal _ClientMessage_Disconnect_default_instance_;
class ClientMessage_EvaluateRes;
struct ClientMessage_EvaluateResDefaultTypeInternal;
extern ClientMessage_EvaluateResDefaultTypeInternal _ClientMessage_EvaluateRes_default_instance_;
class ClientMessage_EvaluateRes_MetricsEntry_DoNotUse;
struct ClientMessage_EvaluateRes_MetricsEntry_DoNotUseDefaultTypeInternal;
extern ClientMessage_EvaluateRes_MetricsEntry_DoNotUseDefaultTypeInternal _ClientMessage_EvaluateRes_MetricsEntry_DoNotUse_default_instance_;
class ClientMessage_FitRes;
struct ClientMessage_FitResDefaultTypeInternal;
extern ClientMessage_FitResDefaultTypeInternal _ClientMessage_FitRes_default_instance_;
class ClientMessage_FitRes_MetricsEntry_DoNotUse;
struct ClientMessage_FitRes_MetricsEntry_DoNotUseDefaultTypeInternal;
extern ClientMessage_FitRes_MetricsEntry_DoNotUseDefaultTypeInternal _ClientMessage_FitRes_MetricsEntry_DoNotUse_default_instance_;
class ClientMessage_ParametersRes;
struct ClientMessage_ParametersResDefaultTypeInternal;
extern ClientMessage_ParametersResDefaultTypeInternal _ClientMessage_ParametersRes_default_instance_;
class ClientMessage_PropertiesRes;
struct ClientMessage_PropertiesResDefaultTypeInternal;
extern ClientMessage_PropertiesResDefaultTypeInternal _ClientMessage_PropertiesRes_default_instance_;
class ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse;
struct ClientMessage_PropertiesRes_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern ClientMessage_PropertiesRes_PropertiesEntry_DoNotUseDefaultTypeInternal _ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse_default_instance_;
class Parameters;
struct ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
class Scalar;
struct ScalarDefaultTypeInternal;
extern ScalarDefaultTypeInternal _Scalar_default_instance_;
class ServerMessage;
struct ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class ServerMessage_EvaluateIns;
struct ServerMessage_EvaluateInsDefaultTypeInternal;
extern ServerMessage_EvaluateInsDefaultTypeInternal _ServerMessage_EvaluateIns_default_instance_;
class ServerMessage_EvaluateIns_ConfigEntry_DoNotUse;
struct ServerMessage_EvaluateIns_ConfigEntry_DoNotUseDefaultTypeInternal;
extern ServerMessage_EvaluateIns_ConfigEntry_DoNotUseDefaultTypeInternal _ServerMessage_EvaluateIns_ConfigEntry_DoNotUse_default_instance_;
class ServerMessage_FitIns;
struct ServerMessage_FitInsDefaultTypeInternal;
extern ServerMessage_FitInsDefaultTypeInternal _ServerMessage_FitIns_default_instance_;
class ServerMessage_FitIns_ConfigEntry_DoNotUse;
struct ServerMessage_FitIns_ConfigEntry_DoNotUseDefaultTypeInternal;
extern ServerMessage_FitIns_ConfigEntry_DoNotUseDefaultTypeInternal _ServerMessage_FitIns_ConfigEntry_DoNotUse_default_instance_;
class ServerMessage_GetParameters;
struct ServerMessage_GetParametersDefaultTypeInternal;
extern ServerMessage_GetParametersDefaultTypeInternal _ServerMessage_GetParameters_default_instance_;
class ServerMessage_PropertiesIns;
struct ServerMessage_PropertiesInsDefaultTypeInternal;
extern ServerMessage_PropertiesInsDefaultTypeInternal _ServerMessage_PropertiesIns_default_instance_;
class ServerMessage_PropertiesIns_ConfigEntry_DoNotUse;
struct ServerMessage_PropertiesIns_ConfigEntry_DoNotUseDefaultTypeInternal;
extern ServerMessage_PropertiesIns_ConfigEntry_DoNotUseDefaultTypeInternal _ServerMessage_PropertiesIns_ConfigEntry_DoNotUse_default_instance_;
class ServerMessage_Reconnect;
struct ServerMessage_ReconnectDefaultTypeInternal;
extern ServerMessage_ReconnectDefaultTypeInternal _ServerMessage_Reconnect_default_instance_;
}  // namespace flower_sdk
PROTOBUF_NAMESPACE_OPEN
template<> ::flower_sdk::ClientMessage* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage>(Arena*);
template<> ::flower_sdk::ClientMessage_Disconnect* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_Disconnect>(Arena*);
template<> ::flower_sdk::ClientMessage_EvaluateRes* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_EvaluateRes>(Arena*);
template<> ::flower_sdk::ClientMessage_EvaluateRes_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_EvaluateRes_MetricsEntry_DoNotUse>(Arena*);
template<> ::flower_sdk::ClientMessage_FitRes* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_FitRes>(Arena*);
template<> ::flower_sdk::ClientMessage_FitRes_MetricsEntry_DoNotUse* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_FitRes_MetricsEntry_DoNotUse>(Arena*);
template<> ::flower_sdk::ClientMessage_ParametersRes* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_ParametersRes>(Arena*);
template<> ::flower_sdk::ClientMessage_PropertiesRes* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_PropertiesRes>(Arena*);
template<> ::flower_sdk::ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::flower_sdk::ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse>(Arena*);
template<> ::flower_sdk::Parameters* Arena::CreateMaybeMessage<::flower_sdk::Parameters>(Arena*);
template<> ::flower_sdk::Scalar* Arena::CreateMaybeMessage<::flower_sdk::Scalar>(Arena*);
template<> ::flower_sdk::ServerMessage* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage>(Arena*);
template<> ::flower_sdk::ServerMessage_EvaluateIns* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_EvaluateIns>(Arena*);
template<> ::flower_sdk::ServerMessage_EvaluateIns_ConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_EvaluateIns_ConfigEntry_DoNotUse>(Arena*);
template<> ::flower_sdk::ServerMessage_FitIns* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_FitIns>(Arena*);
template<> ::flower_sdk::ServerMessage_FitIns_ConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_FitIns_ConfigEntry_DoNotUse>(Arena*);
template<> ::flower_sdk::ServerMessage_GetParameters* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_GetParameters>(Arena*);
template<> ::flower_sdk::ServerMessage_PropertiesIns* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_PropertiesIns>(Arena*);
template<> ::flower_sdk::ServerMessage_PropertiesIns_ConfigEntry_DoNotUse* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_PropertiesIns_ConfigEntry_DoNotUse>(Arena*);
template<> ::flower_sdk::ServerMessage_Reconnect* Arena::CreateMaybeMessage<::flower_sdk::ServerMessage_Reconnect>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flower_sdk {

enum Reason : int {
  UNKOWN = 0,
  RECONNECT = 1,
  POWER_DISCONNECTED = 2,
  WIFI_UNAVAILABLE = 3,
  ACK = 4,
  Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Reason_IsValid(int value);
constexpr Reason Reason_MIN = UNKOWN;
constexpr Reason Reason_MAX = ACK;
constexpr int Reason_ARRAYSIZE = Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reason_descriptor();
template<typename T>
inline const std::string& Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reason_descriptor(), enum_t_value);
}
inline bool Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reason>(
    Reason_descriptor(), name, value);
}
// ===================================================================

class Parameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.Parameters) */ {
 public:
  inline Parameters() : Parameters(nullptr) {}
  virtual ~Parameters();
  explicit constexpr Parameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameters(const Parameters& from);
  Parameters(Parameters&& from) noexcept
    : Parameters() {
    *this = ::std::move(from);
  }

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameters& operator=(Parameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Parameters& a, Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameters* New() const final {
    return CreateMaybeMessage<Parameters>(nullptr);
  }

  Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameters& from);
  void MergeFrom(const Parameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.Parameters";
  }
  protected:
  explicit Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
    kTensorTypeFieldNumber = 2,
  };
  // repeated bytes parameters = 1;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  const std::string& parameters(int index) const;
  std::string* mutable_parameters(int index);
  void set_parameters(int index, const std::string& value);
  void set_parameters(int index, std::string&& value);
  void set_parameters(int index, const char* value);
  void set_parameters(int index, const void* value, size_t size);
  std::string* add_parameters();
  void add_parameters(const std::string& value);
  void add_parameters(std::string&& value);
  void add_parameters(const char* value);
  void add_parameters(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parameters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parameters();
  private:
  const std::string& _internal_parameters(int index) const;
  std::string* _internal_add_parameters();
  public:

  // string tensor_type = 2;
  void clear_tensor_type();
  const std::string& tensor_type() const;
  void set_tensor_type(const std::string& value);
  void set_tensor_type(std::string&& value);
  void set_tensor_type(const char* value);
  void set_tensor_type(const char* value, size_t size);
  std::string* mutable_tensor_type();
  std::string* release_tensor_type();
  void set_allocated_tensor_type(std::string* tensor_type);
  private:
  const std::string& _internal_tensor_type() const;
  void _internal_set_tensor_type(const std::string& value);
  std::string* _internal_mutable_tensor_type();
  public:

  // @@protoc_insertion_point(class_scope:flower_sdk.Parameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage_Reconnect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ServerMessage.Reconnect) */ {
 public:
  inline ServerMessage_Reconnect() : ServerMessage_Reconnect(nullptr) {}
  virtual ~ServerMessage_Reconnect();
  explicit constexpr ServerMessage_Reconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_Reconnect(const ServerMessage_Reconnect& from);
  ServerMessage_Reconnect(ServerMessage_Reconnect&& from) noexcept
    : ServerMessage_Reconnect() {
    *this = ::std::move(from);
  }

  inline ServerMessage_Reconnect& operator=(const ServerMessage_Reconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_Reconnect& operator=(ServerMessage_Reconnect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage_Reconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_Reconnect* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_Reconnect*>(
               &_ServerMessage_Reconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerMessage_Reconnect& a, ServerMessage_Reconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_Reconnect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_Reconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage_Reconnect* New() const final {
    return CreateMaybeMessage<ServerMessage_Reconnect>(nullptr);
  }

  ServerMessage_Reconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage_Reconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage_Reconnect& from);
  void MergeFrom(const ServerMessage_Reconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_Reconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ServerMessage.Reconnect";
  }
  protected:
  explicit ServerMessage_Reconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
  };
  // int64 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:flower_sdk.ServerMessage.Reconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage_GetParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ServerMessage.GetParameters) */ {
 public:
  inline ServerMessage_GetParameters() : ServerMessage_GetParameters(nullptr) {}
  virtual ~ServerMessage_GetParameters();
  explicit constexpr ServerMessage_GetParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_GetParameters(const ServerMessage_GetParameters& from);
  ServerMessage_GetParameters(ServerMessage_GetParameters&& from) noexcept
    : ServerMessage_GetParameters() {
    *this = ::std::move(from);
  }

  inline ServerMessage_GetParameters& operator=(const ServerMessage_GetParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_GetParameters& operator=(ServerMessage_GetParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage_GetParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_GetParameters* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_GetParameters*>(
               &_ServerMessage_GetParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerMessage_GetParameters& a, ServerMessage_GetParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_GetParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_GetParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage_GetParameters* New() const final {
    return CreateMaybeMessage<ServerMessage_GetParameters>(nullptr);
  }

  ServerMessage_GetParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage_GetParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage_GetParameters& from);
  void MergeFrom(const ServerMessage_GetParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_GetParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ServerMessage.GetParameters";
  }
  protected:
  explicit ServerMessage_GetParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flower_sdk.ServerMessage.GetParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage_FitIns_ConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerMessage_FitIns_ConfigEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerMessage_FitIns_ConfigEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ServerMessage_FitIns_ConfigEntry_DoNotUse();
  explicit constexpr ServerMessage_FitIns_ConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ServerMessage_FitIns_ConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServerMessage_FitIns_ConfigEntry_DoNotUse& other);
  static const ServerMessage_FitIns_ConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServerMessage_FitIns_ConfigEntry_DoNotUse*>(&_ServerMessage_FitIns_ConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flower_sdk.ServerMessage.FitIns.ConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_5ftransport_2eproto);
    return ::descriptor_table_sdk_5ftransport_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class ServerMessage_FitIns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ServerMessage.FitIns) */ {
 public:
  inline ServerMessage_FitIns() : ServerMessage_FitIns(nullptr) {}
  virtual ~ServerMessage_FitIns();
  explicit constexpr ServerMessage_FitIns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_FitIns(const ServerMessage_FitIns& from);
  ServerMessage_FitIns(ServerMessage_FitIns&& from) noexcept
    : ServerMessage_FitIns() {
    *this = ::std::move(from);
  }

  inline ServerMessage_FitIns& operator=(const ServerMessage_FitIns& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_FitIns& operator=(ServerMessage_FitIns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage_FitIns& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_FitIns* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_FitIns*>(
               &_ServerMessage_FitIns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerMessage_FitIns& a, ServerMessage_FitIns& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_FitIns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_FitIns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage_FitIns* New() const final {
    return CreateMaybeMessage<ServerMessage_FitIns>(nullptr);
  }

  ServerMessage_FitIns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage_FitIns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage_FitIns& from);
  void MergeFrom(const ServerMessage_FitIns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_FitIns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ServerMessage.FitIns";
  }
  protected:
  explicit ServerMessage_FitIns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 2,
    kParametersFieldNumber = 1,
  };
  // map<string, .flower_sdk.Scalar> config = 2;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      _internal_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      _internal_mutable_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      mutable_config();

  // .flower_sdk.Parameters parameters = 1;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::flower_sdk::Parameters& parameters() const;
  ::flower_sdk::Parameters* release_parameters();
  ::flower_sdk::Parameters* mutable_parameters();
  void set_allocated_parameters(::flower_sdk::Parameters* parameters);
  private:
  const ::flower_sdk::Parameters& _internal_parameters() const;
  ::flower_sdk::Parameters* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::flower_sdk::Parameters* parameters);
  ::flower_sdk::Parameters* unsafe_arena_release_parameters();

  // @@protoc_insertion_point(class_scope:flower_sdk.ServerMessage.FitIns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ServerMessage_FitIns_ConfigEntry_DoNotUse,
      std::string, ::flower_sdk::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> config_;
  ::flower_sdk::Parameters* parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage_EvaluateIns_ConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerMessage_EvaluateIns_ConfigEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerMessage_EvaluateIns_ConfigEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ServerMessage_EvaluateIns_ConfigEntry_DoNotUse();
  explicit constexpr ServerMessage_EvaluateIns_ConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ServerMessage_EvaluateIns_ConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServerMessage_EvaluateIns_ConfigEntry_DoNotUse& other);
  static const ServerMessage_EvaluateIns_ConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServerMessage_EvaluateIns_ConfigEntry_DoNotUse*>(&_ServerMessage_EvaluateIns_ConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flower_sdk.ServerMessage.EvaluateIns.ConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_5ftransport_2eproto);
    return ::descriptor_table_sdk_5ftransport_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class ServerMessage_EvaluateIns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ServerMessage.EvaluateIns) */ {
 public:
  inline ServerMessage_EvaluateIns() : ServerMessage_EvaluateIns(nullptr) {}
  virtual ~ServerMessage_EvaluateIns();
  explicit constexpr ServerMessage_EvaluateIns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_EvaluateIns(const ServerMessage_EvaluateIns& from);
  ServerMessage_EvaluateIns(ServerMessage_EvaluateIns&& from) noexcept
    : ServerMessage_EvaluateIns() {
    *this = ::std::move(from);
  }

  inline ServerMessage_EvaluateIns& operator=(const ServerMessage_EvaluateIns& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_EvaluateIns& operator=(ServerMessage_EvaluateIns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage_EvaluateIns& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_EvaluateIns* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_EvaluateIns*>(
               &_ServerMessage_EvaluateIns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerMessage_EvaluateIns& a, ServerMessage_EvaluateIns& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_EvaluateIns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_EvaluateIns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage_EvaluateIns* New() const final {
    return CreateMaybeMessage<ServerMessage_EvaluateIns>(nullptr);
  }

  ServerMessage_EvaluateIns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage_EvaluateIns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage_EvaluateIns& from);
  void MergeFrom(const ServerMessage_EvaluateIns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_EvaluateIns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ServerMessage.EvaluateIns";
  }
  protected:
  explicit ServerMessage_EvaluateIns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 2,
    kParametersFieldNumber = 1,
  };
  // map<string, .flower_sdk.Scalar> config = 2;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      _internal_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      _internal_mutable_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      mutable_config();

  // .flower_sdk.Parameters parameters = 1;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::flower_sdk::Parameters& parameters() const;
  ::flower_sdk::Parameters* release_parameters();
  ::flower_sdk::Parameters* mutable_parameters();
  void set_allocated_parameters(::flower_sdk::Parameters* parameters);
  private:
  const ::flower_sdk::Parameters& _internal_parameters() const;
  ::flower_sdk::Parameters* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::flower_sdk::Parameters* parameters);
  ::flower_sdk::Parameters* unsafe_arena_release_parameters();

  // @@protoc_insertion_point(class_scope:flower_sdk.ServerMessage.EvaluateIns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ServerMessage_EvaluateIns_ConfigEntry_DoNotUse,
      std::string, ::flower_sdk::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> config_;
  ::flower_sdk::Parameters* parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage_PropertiesIns_ConfigEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerMessage_PropertiesIns_ConfigEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServerMessage_PropertiesIns_ConfigEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ServerMessage_PropertiesIns_ConfigEntry_DoNotUse();
  explicit constexpr ServerMessage_PropertiesIns_ConfigEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ServerMessage_PropertiesIns_ConfigEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServerMessage_PropertiesIns_ConfigEntry_DoNotUse& other);
  static const ServerMessage_PropertiesIns_ConfigEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServerMessage_PropertiesIns_ConfigEntry_DoNotUse*>(&_ServerMessage_PropertiesIns_ConfigEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flower_sdk.ServerMessage.PropertiesIns.ConfigEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_5ftransport_2eproto);
    return ::descriptor_table_sdk_5ftransport_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class ServerMessage_PropertiesIns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ServerMessage.PropertiesIns) */ {
 public:
  inline ServerMessage_PropertiesIns() : ServerMessage_PropertiesIns(nullptr) {}
  virtual ~ServerMessage_PropertiesIns();
  explicit constexpr ServerMessage_PropertiesIns(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage_PropertiesIns(const ServerMessage_PropertiesIns& from);
  ServerMessage_PropertiesIns(ServerMessage_PropertiesIns&& from) noexcept
    : ServerMessage_PropertiesIns() {
    *this = ::std::move(from);
  }

  inline ServerMessage_PropertiesIns& operator=(const ServerMessage_PropertiesIns& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage_PropertiesIns& operator=(ServerMessage_PropertiesIns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage_PropertiesIns& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMessage_PropertiesIns* internal_default_instance() {
    return reinterpret_cast<const ServerMessage_PropertiesIns*>(
               &_ServerMessage_PropertiesIns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ServerMessage_PropertiesIns& a, ServerMessage_PropertiesIns& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage_PropertiesIns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage_PropertiesIns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage_PropertiesIns* New() const final {
    return CreateMaybeMessage<ServerMessage_PropertiesIns>(nullptr);
  }

  ServerMessage_PropertiesIns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage_PropertiesIns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage_PropertiesIns& from);
  void MergeFrom(const ServerMessage_PropertiesIns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage_PropertiesIns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ServerMessage.PropertiesIns";
  }
  protected:
  explicit ServerMessage_PropertiesIns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // map<string, .flower_sdk.Scalar> config = 1;
  int config_size() const;
  private:
  int _internal_config_size() const;
  public:
  void clear_config();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      _internal_config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      _internal_mutable_config();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      config() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      mutable_config();

  // @@protoc_insertion_point(class_scope:flower_sdk.ServerMessage.PropertiesIns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ServerMessage_PropertiesIns_ConfigEntry_DoNotUse,
      std::string, ::flower_sdk::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ServerMessage) */ {
 public:
  inline ServerMessage() : ServerMessage(nullptr) {}
  virtual ~ServerMessage();
  explicit constexpr ServerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kReconnect = 1,
    kGetParameters = 2,
    kFitIns = 3,
    kEvaluateIns = 4,
    kPropertiesIns = 5,
    MSG_NOT_SET = 0,
  };

  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ServerMessage";
  }
  protected:
  explicit ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ServerMessage_Reconnect Reconnect;
  typedef ServerMessage_GetParameters GetParameters;
  typedef ServerMessage_FitIns FitIns;
  typedef ServerMessage_EvaluateIns EvaluateIns;
  typedef ServerMessage_PropertiesIns PropertiesIns;

  // accessors -------------------------------------------------------

  enum : int {
    kReconnectFieldNumber = 1,
    kGetParametersFieldNumber = 2,
    kFitInsFieldNumber = 3,
    kEvaluateInsFieldNumber = 4,
    kPropertiesInsFieldNumber = 5,
  };
  // .flower_sdk.ServerMessage.Reconnect reconnect = 1;
  bool has_reconnect() const;
  private:
  bool _internal_has_reconnect() const;
  public:
  void clear_reconnect();
  const ::flower_sdk::ServerMessage_Reconnect& reconnect() const;
  ::flower_sdk::ServerMessage_Reconnect* release_reconnect();
  ::flower_sdk::ServerMessage_Reconnect* mutable_reconnect();
  void set_allocated_reconnect(::flower_sdk::ServerMessage_Reconnect* reconnect);
  private:
  const ::flower_sdk::ServerMessage_Reconnect& _internal_reconnect() const;
  ::flower_sdk::ServerMessage_Reconnect* _internal_mutable_reconnect();
  public:
  void unsafe_arena_set_allocated_reconnect(
      ::flower_sdk::ServerMessage_Reconnect* reconnect);
  ::flower_sdk::ServerMessage_Reconnect* unsafe_arena_release_reconnect();

  // .flower_sdk.ServerMessage.GetParameters get_parameters = 2;
  bool has_get_parameters() const;
  private:
  bool _internal_has_get_parameters() const;
  public:
  void clear_get_parameters();
  const ::flower_sdk::ServerMessage_GetParameters& get_parameters() const;
  ::flower_sdk::ServerMessage_GetParameters* release_get_parameters();
  ::flower_sdk::ServerMessage_GetParameters* mutable_get_parameters();
  void set_allocated_get_parameters(::flower_sdk::ServerMessage_GetParameters* get_parameters);
  private:
  const ::flower_sdk::ServerMessage_GetParameters& _internal_get_parameters() const;
  ::flower_sdk::ServerMessage_GetParameters* _internal_mutable_get_parameters();
  public:
  void unsafe_arena_set_allocated_get_parameters(
      ::flower_sdk::ServerMessage_GetParameters* get_parameters);
  ::flower_sdk::ServerMessage_GetParameters* unsafe_arena_release_get_parameters();

  // .flower_sdk.ServerMessage.FitIns fit_ins = 3;
  bool has_fit_ins() const;
  private:
  bool _internal_has_fit_ins() const;
  public:
  void clear_fit_ins();
  const ::flower_sdk::ServerMessage_FitIns& fit_ins() const;
  ::flower_sdk::ServerMessage_FitIns* release_fit_ins();
  ::flower_sdk::ServerMessage_FitIns* mutable_fit_ins();
  void set_allocated_fit_ins(::flower_sdk::ServerMessage_FitIns* fit_ins);
  private:
  const ::flower_sdk::ServerMessage_FitIns& _internal_fit_ins() const;
  ::flower_sdk::ServerMessage_FitIns* _internal_mutable_fit_ins();
  public:
  void unsafe_arena_set_allocated_fit_ins(
      ::flower_sdk::ServerMessage_FitIns* fit_ins);
  ::flower_sdk::ServerMessage_FitIns* unsafe_arena_release_fit_ins();

  // .flower_sdk.ServerMessage.EvaluateIns evaluate_ins = 4;
  bool has_evaluate_ins() const;
  private:
  bool _internal_has_evaluate_ins() const;
  public:
  void clear_evaluate_ins();
  const ::flower_sdk::ServerMessage_EvaluateIns& evaluate_ins() const;
  ::flower_sdk::ServerMessage_EvaluateIns* release_evaluate_ins();
  ::flower_sdk::ServerMessage_EvaluateIns* mutable_evaluate_ins();
  void set_allocated_evaluate_ins(::flower_sdk::ServerMessage_EvaluateIns* evaluate_ins);
  private:
  const ::flower_sdk::ServerMessage_EvaluateIns& _internal_evaluate_ins() const;
  ::flower_sdk::ServerMessage_EvaluateIns* _internal_mutable_evaluate_ins();
  public:
  void unsafe_arena_set_allocated_evaluate_ins(
      ::flower_sdk::ServerMessage_EvaluateIns* evaluate_ins);
  ::flower_sdk::ServerMessage_EvaluateIns* unsafe_arena_release_evaluate_ins();

  // .flower_sdk.ServerMessage.PropertiesIns properties_ins = 5;
  bool has_properties_ins() const;
  private:
  bool _internal_has_properties_ins() const;
  public:
  void clear_properties_ins();
  const ::flower_sdk::ServerMessage_PropertiesIns& properties_ins() const;
  ::flower_sdk::ServerMessage_PropertiesIns* release_properties_ins();
  ::flower_sdk::ServerMessage_PropertiesIns* mutable_properties_ins();
  void set_allocated_properties_ins(::flower_sdk::ServerMessage_PropertiesIns* properties_ins);
  private:
  const ::flower_sdk::ServerMessage_PropertiesIns& _internal_properties_ins() const;
  ::flower_sdk::ServerMessage_PropertiesIns* _internal_mutable_properties_ins();
  public:
  void unsafe_arena_set_allocated_properties_ins(
      ::flower_sdk::ServerMessage_PropertiesIns* properties_ins);
  ::flower_sdk::ServerMessage_PropertiesIns* unsafe_arena_release_properties_ins();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:flower_sdk.ServerMessage)
 private:
  class _Internal;
  void set_has_reconnect();
  void set_has_get_parameters();
  void set_has_fit_ins();
  void set_has_evaluate_ins();
  void set_has_properties_ins();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flower_sdk::ServerMessage_Reconnect* reconnect_;
    ::flower_sdk::ServerMessage_GetParameters* get_parameters_;
    ::flower_sdk::ServerMessage_FitIns* fit_ins_;
    ::flower_sdk::ServerMessage_EvaluateIns* evaluate_ins_;
    ::flower_sdk::ServerMessage_PropertiesIns* properties_ins_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_Disconnect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ClientMessage.Disconnect) */ {
 public:
  inline ClientMessage_Disconnect() : ClientMessage_Disconnect(nullptr) {}
  virtual ~ClientMessage_Disconnect();
  explicit constexpr ClientMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_Disconnect(const ClientMessage_Disconnect& from);
  ClientMessage_Disconnect(ClientMessage_Disconnect&& from) noexcept
    : ClientMessage_Disconnect() {
    *this = ::std::move(from);
  }

  inline ClientMessage_Disconnect& operator=(const ClientMessage_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_Disconnect& operator=(ClientMessage_Disconnect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_Disconnect* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_Disconnect*>(
               &_ClientMessage_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClientMessage_Disconnect& a, ClientMessage_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_Disconnect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_Disconnect* New() const final {
    return CreateMaybeMessage<ClientMessage_Disconnect>(nullptr);
  }

  ClientMessage_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_Disconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_Disconnect& from);
  void MergeFrom(const ClientMessage_Disconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_Disconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ClientMessage.Disconnect";
  }
  protected:
  explicit ClientMessage_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .flower_sdk.Reason reason = 1;
  void clear_reason();
  ::flower_sdk::Reason reason() const;
  void set_reason(::flower_sdk::Reason value);
  private:
  ::flower_sdk::Reason _internal_reason() const;
  void _internal_set_reason(::flower_sdk::Reason value);
  public:

  // @@protoc_insertion_point(class_scope:flower_sdk.ClientMessage.Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_ParametersRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ClientMessage.ParametersRes) */ {
 public:
  inline ClientMessage_ParametersRes() : ClientMessage_ParametersRes(nullptr) {}
  virtual ~ClientMessage_ParametersRes();
  explicit constexpr ClientMessage_ParametersRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_ParametersRes(const ClientMessage_ParametersRes& from);
  ClientMessage_ParametersRes(ClientMessage_ParametersRes&& from) noexcept
    : ClientMessage_ParametersRes() {
    *this = ::std::move(from);
  }

  inline ClientMessage_ParametersRes& operator=(const ClientMessage_ParametersRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_ParametersRes& operator=(ClientMessage_ParametersRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_ParametersRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_ParametersRes* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_ParametersRes*>(
               &_ClientMessage_ParametersRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClientMessage_ParametersRes& a, ClientMessage_ParametersRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_ParametersRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_ParametersRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_ParametersRes* New() const final {
    return CreateMaybeMessage<ClientMessage_ParametersRes>(nullptr);
  }

  ClientMessage_ParametersRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_ParametersRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_ParametersRes& from);
  void MergeFrom(const ClientMessage_ParametersRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_ParametersRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ClientMessage.ParametersRes";
  }
  protected:
  explicit ClientMessage_ParametersRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
  };
  // .flower_sdk.Parameters parameters = 1;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::flower_sdk::Parameters& parameters() const;
  ::flower_sdk::Parameters* release_parameters();
  ::flower_sdk::Parameters* mutable_parameters();
  void set_allocated_parameters(::flower_sdk::Parameters* parameters);
  private:
  const ::flower_sdk::Parameters& _internal_parameters() const;
  ::flower_sdk::Parameters* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::flower_sdk::Parameters* parameters);
  ::flower_sdk::Parameters* unsafe_arena_release_parameters();

  // @@protoc_insertion_point(class_scope:flower_sdk.ClientMessage.ParametersRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flower_sdk::Parameters* parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_FitRes_MetricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClientMessage_FitRes_MetricsEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClientMessage_FitRes_MetricsEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ClientMessage_FitRes_MetricsEntry_DoNotUse();
  explicit constexpr ClientMessage_FitRes_MetricsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ClientMessage_FitRes_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ClientMessage_FitRes_MetricsEntry_DoNotUse& other);
  static const ClientMessage_FitRes_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClientMessage_FitRes_MetricsEntry_DoNotUse*>(&_ClientMessage_FitRes_MetricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flower_sdk.ClientMessage.FitRes.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_5ftransport_2eproto);
    return ::descriptor_table_sdk_5ftransport_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class ClientMessage_FitRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ClientMessage.FitRes) */ {
 public:
  inline ClientMessage_FitRes() : ClientMessage_FitRes(nullptr) {}
  virtual ~ClientMessage_FitRes();
  explicit constexpr ClientMessage_FitRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_FitRes(const ClientMessage_FitRes& from);
  ClientMessage_FitRes(ClientMessage_FitRes&& from) noexcept
    : ClientMessage_FitRes() {
    *this = ::std::move(from);
  }

  inline ClientMessage_FitRes& operator=(const ClientMessage_FitRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_FitRes& operator=(ClientMessage_FitRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_FitRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_FitRes* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_FitRes*>(
               &_ClientMessage_FitRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClientMessage_FitRes& a, ClientMessage_FitRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_FitRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_FitRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_FitRes* New() const final {
    return CreateMaybeMessage<ClientMessage_FitRes>(nullptr);
  }

  ClientMessage_FitRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_FitRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_FitRes& from);
  void MergeFrom(const ClientMessage_FitRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_FitRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ClientMessage.FitRes";
  }
  protected:
  explicit ClientMessage_FitRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 5,
    kParametersFieldNumber = 1,
    kNumExamplesFieldNumber = 2,
  };
  // map<string, .flower_sdk.Scalar> metrics = 5;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      _internal_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      _internal_mutable_metrics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      mutable_metrics();

  // .flower_sdk.Parameters parameters = 1;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::flower_sdk::Parameters& parameters() const;
  ::flower_sdk::Parameters* release_parameters();
  ::flower_sdk::Parameters* mutable_parameters();
  void set_allocated_parameters(::flower_sdk::Parameters* parameters);
  private:
  const ::flower_sdk::Parameters& _internal_parameters() const;
  ::flower_sdk::Parameters* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::flower_sdk::Parameters* parameters);
  ::flower_sdk::Parameters* unsafe_arena_release_parameters();

  // int64 num_examples = 2;
  void clear_num_examples();
  ::PROTOBUF_NAMESPACE_ID::int64 num_examples() const;
  void set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_examples() const;
  void _internal_set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:flower_sdk.ClientMessage.FitRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ClientMessage_FitRes_MetricsEntry_DoNotUse,
      std::string, ::flower_sdk::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> metrics_;
  ::flower_sdk::Parameters* parameters_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_examples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_EvaluateRes_MetricsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClientMessage_EvaluateRes_MetricsEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClientMessage_EvaluateRes_MetricsEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ClientMessage_EvaluateRes_MetricsEntry_DoNotUse();
  explicit constexpr ClientMessage_EvaluateRes_MetricsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ClientMessage_EvaluateRes_MetricsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ClientMessage_EvaluateRes_MetricsEntry_DoNotUse& other);
  static const ClientMessage_EvaluateRes_MetricsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClientMessage_EvaluateRes_MetricsEntry_DoNotUse*>(&_ClientMessage_EvaluateRes_MetricsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flower_sdk.ClientMessage.EvaluateRes.MetricsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_5ftransport_2eproto);
    return ::descriptor_table_sdk_5ftransport_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class ClientMessage_EvaluateRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ClientMessage.EvaluateRes) */ {
 public:
  inline ClientMessage_EvaluateRes() : ClientMessage_EvaluateRes(nullptr) {}
  virtual ~ClientMessage_EvaluateRes();
  explicit constexpr ClientMessage_EvaluateRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_EvaluateRes(const ClientMessage_EvaluateRes& from);
  ClientMessage_EvaluateRes(ClientMessage_EvaluateRes&& from) noexcept
    : ClientMessage_EvaluateRes() {
    *this = ::std::move(from);
  }

  inline ClientMessage_EvaluateRes& operator=(const ClientMessage_EvaluateRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_EvaluateRes& operator=(ClientMessage_EvaluateRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_EvaluateRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_EvaluateRes* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_EvaluateRes*>(
               &_ClientMessage_EvaluateRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ClientMessage_EvaluateRes& a, ClientMessage_EvaluateRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_EvaluateRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_EvaluateRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_EvaluateRes* New() const final {
    return CreateMaybeMessage<ClientMessage_EvaluateRes>(nullptr);
  }

  ClientMessage_EvaluateRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_EvaluateRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_EvaluateRes& from);
  void MergeFrom(const ClientMessage_EvaluateRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_EvaluateRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ClientMessage.EvaluateRes";
  }
  protected:
  explicit ClientMessage_EvaluateRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 4,
    kNumExamplesFieldNumber = 1,
    kLossFieldNumber = 2,
  };
  // map<string, .flower_sdk.Scalar> metrics = 4;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      _internal_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      _internal_mutable_metrics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      metrics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      mutable_metrics();

  // int64 num_examples = 1;
  void clear_num_examples();
  ::PROTOBUF_NAMESPACE_ID::int64 num_examples() const;
  void set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_examples() const;
  void _internal_set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float loss = 2;
  void clear_loss();
  float loss() const;
  void set_loss(float value);
  private:
  float _internal_loss() const;
  void _internal_set_loss(float value);
  public:

  // @@protoc_insertion_point(class_scope:flower_sdk.ClientMessage.EvaluateRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ClientMessage_EvaluateRes_MetricsEntry_DoNotUse,
      std::string, ::flower_sdk::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> metrics_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_examples_;
  float loss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse, 
    std::string, ::flower_sdk::Scalar,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse();
  explicit constexpr ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse& other);
  static const ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse*>(&_ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flower_sdk.ClientMessage.PropertiesRes.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sdk_5ftransport_2eproto);
    return ::descriptor_table_sdk_5ftransport_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class ClientMessage_PropertiesRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ClientMessage.PropertiesRes) */ {
 public:
  inline ClientMessage_PropertiesRes() : ClientMessage_PropertiesRes(nullptr) {}
  virtual ~ClientMessage_PropertiesRes();
  explicit constexpr ClientMessage_PropertiesRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage_PropertiesRes(const ClientMessage_PropertiesRes& from);
  ClientMessage_PropertiesRes(ClientMessage_PropertiesRes&& from) noexcept
    : ClientMessage_PropertiesRes() {
    *this = ::std::move(from);
  }

  inline ClientMessage_PropertiesRes& operator=(const ClientMessage_PropertiesRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage_PropertiesRes& operator=(ClientMessage_PropertiesRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage_PropertiesRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMessage_PropertiesRes* internal_default_instance() {
    return reinterpret_cast<const ClientMessage_PropertiesRes*>(
               &_ClientMessage_PropertiesRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ClientMessage_PropertiesRes& a, ClientMessage_PropertiesRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage_PropertiesRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage_PropertiesRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage_PropertiesRes* New() const final {
    return CreateMaybeMessage<ClientMessage_PropertiesRes>(nullptr);
  }

  ClientMessage_PropertiesRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage_PropertiesRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage_PropertiesRes& from);
  void MergeFrom(const ClientMessage_PropertiesRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage_PropertiesRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ClientMessage.PropertiesRes";
  }
  protected:
  explicit ClientMessage_PropertiesRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // map<string, .flower_sdk.Scalar> properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:flower_sdk.ClientMessage.PropertiesRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ClientMessage_PropertiesRes_PropertiesEntry_DoNotUse,
      std::string, ::flower_sdk::Scalar,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class ClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {}
  virtual ~ClientMessage();
  explicit constexpr ClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kDisconnect = 1,
    kParametersRes = 2,
    kFitRes = 3,
    kEvaluateRes = 4,
    kPropertiesRes = 5,
    MSG_NOT_SET = 0,
  };

  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMessage_Disconnect Disconnect;
  typedef ClientMessage_ParametersRes ParametersRes;
  typedef ClientMessage_FitRes FitRes;
  typedef ClientMessage_EvaluateRes EvaluateRes;
  typedef ClientMessage_PropertiesRes PropertiesRes;

  // accessors -------------------------------------------------------

  enum : int {
    kDisconnectFieldNumber = 1,
    kParametersResFieldNumber = 2,
    kFitResFieldNumber = 3,
    kEvaluateResFieldNumber = 4,
    kPropertiesResFieldNumber = 5,
  };
  // .flower_sdk.ClientMessage.Disconnect disconnect = 1;
  bool has_disconnect() const;
  private:
  bool _internal_has_disconnect() const;
  public:
  void clear_disconnect();
  const ::flower_sdk::ClientMessage_Disconnect& disconnect() const;
  ::flower_sdk::ClientMessage_Disconnect* release_disconnect();
  ::flower_sdk::ClientMessage_Disconnect* mutable_disconnect();
  void set_allocated_disconnect(::flower_sdk::ClientMessage_Disconnect* disconnect);
  private:
  const ::flower_sdk::ClientMessage_Disconnect& _internal_disconnect() const;
  ::flower_sdk::ClientMessage_Disconnect* _internal_mutable_disconnect();
  public:
  void unsafe_arena_set_allocated_disconnect(
      ::flower_sdk::ClientMessage_Disconnect* disconnect);
  ::flower_sdk::ClientMessage_Disconnect* unsafe_arena_release_disconnect();

  // .flower_sdk.ClientMessage.ParametersRes parameters_res = 2;
  bool has_parameters_res() const;
  private:
  bool _internal_has_parameters_res() const;
  public:
  void clear_parameters_res();
  const ::flower_sdk::ClientMessage_ParametersRes& parameters_res() const;
  ::flower_sdk::ClientMessage_ParametersRes* release_parameters_res();
  ::flower_sdk::ClientMessage_ParametersRes* mutable_parameters_res();
  void set_allocated_parameters_res(::flower_sdk::ClientMessage_ParametersRes* parameters_res);
  private:
  const ::flower_sdk::ClientMessage_ParametersRes& _internal_parameters_res() const;
  ::flower_sdk::ClientMessage_ParametersRes* _internal_mutable_parameters_res();
  public:
  void unsafe_arena_set_allocated_parameters_res(
      ::flower_sdk::ClientMessage_ParametersRes* parameters_res);
  ::flower_sdk::ClientMessage_ParametersRes* unsafe_arena_release_parameters_res();

  // .flower_sdk.ClientMessage.FitRes fit_res = 3;
  bool has_fit_res() const;
  private:
  bool _internal_has_fit_res() const;
  public:
  void clear_fit_res();
  const ::flower_sdk::ClientMessage_FitRes& fit_res() const;
  ::flower_sdk::ClientMessage_FitRes* release_fit_res();
  ::flower_sdk::ClientMessage_FitRes* mutable_fit_res();
  void set_allocated_fit_res(::flower_sdk::ClientMessage_FitRes* fit_res);
  private:
  const ::flower_sdk::ClientMessage_FitRes& _internal_fit_res() const;
  ::flower_sdk::ClientMessage_FitRes* _internal_mutable_fit_res();
  public:
  void unsafe_arena_set_allocated_fit_res(
      ::flower_sdk::ClientMessage_FitRes* fit_res);
  ::flower_sdk::ClientMessage_FitRes* unsafe_arena_release_fit_res();

  // .flower_sdk.ClientMessage.EvaluateRes evaluate_res = 4;
  bool has_evaluate_res() const;
  private:
  bool _internal_has_evaluate_res() const;
  public:
  void clear_evaluate_res();
  const ::flower_sdk::ClientMessage_EvaluateRes& evaluate_res() const;
  ::flower_sdk::ClientMessage_EvaluateRes* release_evaluate_res();
  ::flower_sdk::ClientMessage_EvaluateRes* mutable_evaluate_res();
  void set_allocated_evaluate_res(::flower_sdk::ClientMessage_EvaluateRes* evaluate_res);
  private:
  const ::flower_sdk::ClientMessage_EvaluateRes& _internal_evaluate_res() const;
  ::flower_sdk::ClientMessage_EvaluateRes* _internal_mutable_evaluate_res();
  public:
  void unsafe_arena_set_allocated_evaluate_res(
      ::flower_sdk::ClientMessage_EvaluateRes* evaluate_res);
  ::flower_sdk::ClientMessage_EvaluateRes* unsafe_arena_release_evaluate_res();

  // .flower_sdk.ClientMessage.PropertiesRes properties_res = 5;
  bool has_properties_res() const;
  private:
  bool _internal_has_properties_res() const;
  public:
  void clear_properties_res();
  const ::flower_sdk::ClientMessage_PropertiesRes& properties_res() const;
  ::flower_sdk::ClientMessage_PropertiesRes* release_properties_res();
  ::flower_sdk::ClientMessage_PropertiesRes* mutable_properties_res();
  void set_allocated_properties_res(::flower_sdk::ClientMessage_PropertiesRes* properties_res);
  private:
  const ::flower_sdk::ClientMessage_PropertiesRes& _internal_properties_res() const;
  ::flower_sdk::ClientMessage_PropertiesRes* _internal_mutable_properties_res();
  public:
  void unsafe_arena_set_allocated_properties_res(
      ::flower_sdk::ClientMessage_PropertiesRes* properties_res);
  ::flower_sdk::ClientMessage_PropertiesRes* unsafe_arena_release_properties_res();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:flower_sdk.ClientMessage)
 private:
  class _Internal;
  void set_has_disconnect();
  void set_has_parameters_res();
  void set_has_fit_res();
  void set_has_evaluate_res();
  void set_has_properties_res();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flower_sdk::ClientMessage_Disconnect* disconnect_;
    ::flower_sdk::ClientMessage_ParametersRes* parameters_res_;
    ::flower_sdk::ClientMessage_FitRes* fit_res_;
    ::flower_sdk::ClientMessage_EvaluateRes* evaluate_res_;
    ::flower_sdk::ClientMessage_PropertiesRes* properties_res_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// -------------------------------------------------------------------

class Scalar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flower_sdk.Scalar) */ {
 public:
  inline Scalar() : Scalar(nullptr) {}
  virtual ~Scalar();
  explicit constexpr Scalar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scalar(const Scalar& from);
  Scalar(Scalar&& from) noexcept
    : Scalar() {
    *this = ::std::move(from);
  }

  inline Scalar& operator=(const Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scalar& operator=(Scalar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scalar& default_instance() {
    return *internal_default_instance();
  }
  enum ScalarCase {
    kDouble = 1,
    kSint64 = 2,
    kBool = 3,
    kString = 4,
    kBytes = 5,
    SCALAR_NOT_SET = 0,
  };

  static inline const Scalar* internal_default_instance() {
    return reinterpret_cast<const Scalar*>(
               &_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Scalar& a, Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Scalar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scalar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scalar* New() const final {
    return CreateMaybeMessage<Scalar>(nullptr);
  }

  Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scalar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scalar& from);
  void MergeFrom(const Scalar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scalar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flower_sdk.Scalar";
  }
  protected:
  explicit Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_sdk_5ftransport_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleFieldNumber = 1,
    kSint64FieldNumber = 2,
    kBoolFieldNumber = 3,
    kStringFieldNumber = 4,
    kBytesFieldNumber = 5,
  };
  // double double = 1;
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // sint64 sint64 = 2;
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64() const;
  void set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64() const;
  void _internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool = 3;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // string string = 4;
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // bytes bytes = 5;
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const std::string& bytes() const;
  void set_bytes(const std::string& value);
  void set_bytes(std::string&& value);
  void set_bytes(const char* value);
  void set_bytes(const void* value, size_t size);
  std::string* mutable_bytes();
  std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  void clear_scalar();
  ScalarCase scalar_case() const;
  // @@protoc_insertion_point(class_scope:flower_sdk.Scalar)
 private:
  class _Internal;
  void set_has_double_();
  void set_has_sint64();
  void set_has_bool_();
  void set_has_string();
  void set_has_bytes();

  inline bool has_scalar() const;
  inline void clear_has_scalar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ScalarUnion {
    constexpr ScalarUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    double double__;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_;
    bool bool__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  } scalar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sdk_5ftransport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Parameters

// repeated bytes parameters = 1;
inline int Parameters::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Parameters::parameters_size() const {
  return _internal_parameters_size();
}
inline void Parameters::clear_parameters() {
  parameters_.Clear();
}
inline std::string* Parameters::add_parameters() {
  // @@protoc_insertion_point(field_add_mutable:flower_sdk.Parameters.parameters)
  return _internal_add_parameters();
}
inline const std::string& Parameters::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const std::string& Parameters::parameters(int index) const {
  // @@protoc_insertion_point(field_get:flower_sdk.Parameters.parameters)
  return _internal_parameters(index);
}
inline std::string* Parameters::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:flower_sdk.Parameters.parameters)
  return parameters_.Mutable(index);
}
inline void Parameters::set_parameters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:flower_sdk.Parameters.parameters)
  parameters_.Mutable(index)->assign(value);
}
inline void Parameters::set_parameters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:flower_sdk.Parameters.parameters)
  parameters_.Mutable(index)->assign(std::move(value));
}
inline void Parameters::set_parameters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parameters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flower_sdk.Parameters.parameters)
}
inline void Parameters::set_parameters(int index, const void* value, size_t size) {
  parameters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flower_sdk.Parameters.parameters)
}
inline std::string* Parameters::_internal_add_parameters() {
  return parameters_.Add();
}
inline void Parameters::add_parameters(const std::string& value) {
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flower_sdk.Parameters.parameters)
}
inline void Parameters::add_parameters(std::string&& value) {
  parameters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flower_sdk.Parameters.parameters)
}
inline void Parameters::add_parameters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flower_sdk.Parameters.parameters)
}
inline void Parameters::add_parameters(const void* value, size_t size) {
  parameters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flower_sdk.Parameters.parameters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Parameters::parameters() const {
  // @@protoc_insertion_point(field_list:flower_sdk.Parameters.parameters)
  return parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Parameters::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:flower_sdk.Parameters.parameters)
  return &parameters_;
}

// string tensor_type = 2;
inline void Parameters::clear_tensor_type() {
  tensor_type_.ClearToEmpty();
}
inline const std::string& Parameters::tensor_type() const {
  // @@protoc_insertion_point(field_get:flower_sdk.Parameters.tensor_type)
  return _internal_tensor_type();
}
inline void Parameters::set_tensor_type(const std::string& value) {
  _internal_set_tensor_type(value);
  // @@protoc_insertion_point(field_set:flower_sdk.Parameters.tensor_type)
}
inline std::string* Parameters::mutable_tensor_type() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.Parameters.tensor_type)
  return _internal_mutable_tensor_type();
}
inline const std::string& Parameters::_internal_tensor_type() const {
  return tensor_type_.Get();
}
inline void Parameters::_internal_set_tensor_type(const std::string& value) {
  
  tensor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Parameters::set_tensor_type(std::string&& value) {
  
  tensor_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:flower_sdk.Parameters.tensor_type)
}
inline void Parameters::set_tensor_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:flower_sdk.Parameters.tensor_type)
}
inline void Parameters::set_tensor_type(const char* value,
    size_t size) {
  
  tensor_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:flower_sdk.Parameters.tensor_type)
}
inline std::string* Parameters::_internal_mutable_tensor_type() {
  
  return tensor_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Parameters::release_tensor_type() {
  // @@protoc_insertion_point(field_release:flower_sdk.Parameters.tensor_type)
  return tensor_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Parameters::set_allocated_tensor_type(std::string* tensor_type) {
  if (tensor_type != nullptr) {
    
  } else {
    
  }
  tensor_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:flower_sdk.Parameters.tensor_type)
}

// -------------------------------------------------------------------

// ServerMessage_Reconnect

// int64 seconds = 1;
inline void ServerMessage_Reconnect::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerMessage_Reconnect::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerMessage_Reconnect::seconds() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.Reconnect.seconds)
  return _internal_seconds();
}
inline void ServerMessage_Reconnect::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seconds_ = value;
}
inline void ServerMessage_Reconnect::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:flower_sdk.ServerMessage.Reconnect.seconds)
}

// -------------------------------------------------------------------

// ServerMessage_GetParameters

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServerMessage_FitIns

// .flower_sdk.Parameters parameters = 1;
inline bool ServerMessage_FitIns::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool ServerMessage_FitIns::has_parameters() const {
  return _internal_has_parameters();
}
inline void ServerMessage_FitIns::clear_parameters() {
  if (GetArena() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
inline const ::flower_sdk::Parameters& ServerMessage_FitIns::_internal_parameters() const {
  const ::flower_sdk::Parameters* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::flower_sdk::Parameters&>(
      ::flower_sdk::_Parameters_default_instance_);
}
inline const ::flower_sdk::Parameters& ServerMessage_FitIns::parameters() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.FitIns.parameters)
  return _internal_parameters();
}
inline void ServerMessage_FitIns::unsafe_arena_set_allocated_parameters(
    ::flower_sdk::Parameters* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ServerMessage.FitIns.parameters)
}
inline ::flower_sdk::Parameters* ServerMessage_FitIns::release_parameters() {
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::flower_sdk::Parameters* ServerMessage_FitIns::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:flower_sdk.ServerMessage.FitIns.parameters)
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::flower_sdk::Parameters* ServerMessage_FitIns::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::flower_sdk::Parameters>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline ::flower_sdk::Parameters* ServerMessage_FitIns::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ServerMessage.FitIns.parameters)
  return _internal_mutable_parameters();
}
inline void ServerMessage_FitIns::set_allocated_parameters(::flower_sdk::Parameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:flower_sdk.ServerMessage.FitIns.parameters)
}

// map<string, .flower_sdk.Scalar> config = 2;
inline int ServerMessage_FitIns::_internal_config_size() const {
  return config_.size();
}
inline int ServerMessage_FitIns::config_size() const {
  return _internal_config_size();
}
inline void ServerMessage_FitIns::clear_config() {
  config_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ServerMessage_FitIns::_internal_config() const {
  return config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ServerMessage_FitIns::config() const {
  // @@protoc_insertion_point(field_map:flower_sdk.ServerMessage.FitIns.config)
  return _internal_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ServerMessage_FitIns::_internal_mutable_config() {
  return config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ServerMessage_FitIns::mutable_config() {
  // @@protoc_insertion_point(field_mutable_map:flower_sdk.ServerMessage.FitIns.config)
  return _internal_mutable_config();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServerMessage_EvaluateIns

// .flower_sdk.Parameters parameters = 1;
inline bool ServerMessage_EvaluateIns::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool ServerMessage_EvaluateIns::has_parameters() const {
  return _internal_has_parameters();
}
inline void ServerMessage_EvaluateIns::clear_parameters() {
  if (GetArena() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
inline const ::flower_sdk::Parameters& ServerMessage_EvaluateIns::_internal_parameters() const {
  const ::flower_sdk::Parameters* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::flower_sdk::Parameters&>(
      ::flower_sdk::_Parameters_default_instance_);
}
inline const ::flower_sdk::Parameters& ServerMessage_EvaluateIns::parameters() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.EvaluateIns.parameters)
  return _internal_parameters();
}
inline void ServerMessage_EvaluateIns::unsafe_arena_set_allocated_parameters(
    ::flower_sdk::Parameters* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ServerMessage.EvaluateIns.parameters)
}
inline ::flower_sdk::Parameters* ServerMessage_EvaluateIns::release_parameters() {
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::flower_sdk::Parameters* ServerMessage_EvaluateIns::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:flower_sdk.ServerMessage.EvaluateIns.parameters)
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::flower_sdk::Parameters* ServerMessage_EvaluateIns::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::flower_sdk::Parameters>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline ::flower_sdk::Parameters* ServerMessage_EvaluateIns::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ServerMessage.EvaluateIns.parameters)
  return _internal_mutable_parameters();
}
inline void ServerMessage_EvaluateIns::set_allocated_parameters(::flower_sdk::Parameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:flower_sdk.ServerMessage.EvaluateIns.parameters)
}

// map<string, .flower_sdk.Scalar> config = 2;
inline int ServerMessage_EvaluateIns::_internal_config_size() const {
  return config_.size();
}
inline int ServerMessage_EvaluateIns::config_size() const {
  return _internal_config_size();
}
inline void ServerMessage_EvaluateIns::clear_config() {
  config_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ServerMessage_EvaluateIns::_internal_config() const {
  return config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ServerMessage_EvaluateIns::config() const {
  // @@protoc_insertion_point(field_map:flower_sdk.ServerMessage.EvaluateIns.config)
  return _internal_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ServerMessage_EvaluateIns::_internal_mutable_config() {
  return config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ServerMessage_EvaluateIns::mutable_config() {
  // @@protoc_insertion_point(field_mutable_map:flower_sdk.ServerMessage.EvaluateIns.config)
  return _internal_mutable_config();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServerMessage_PropertiesIns

// map<string, .flower_sdk.Scalar> config = 1;
inline int ServerMessage_PropertiesIns::_internal_config_size() const {
  return config_.size();
}
inline int ServerMessage_PropertiesIns::config_size() const {
  return _internal_config_size();
}
inline void ServerMessage_PropertiesIns::clear_config() {
  config_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ServerMessage_PropertiesIns::_internal_config() const {
  return config_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ServerMessage_PropertiesIns::config() const {
  // @@protoc_insertion_point(field_map:flower_sdk.ServerMessage.PropertiesIns.config)
  return _internal_config();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ServerMessage_PropertiesIns::_internal_mutable_config() {
  return config_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ServerMessage_PropertiesIns::mutable_config() {
  // @@protoc_insertion_point(field_mutable_map:flower_sdk.ServerMessage.PropertiesIns.config)
  return _internal_mutable_config();
}

// -------------------------------------------------------------------

// ServerMessage

// .flower_sdk.ServerMessage.Reconnect reconnect = 1;
inline bool ServerMessage::_internal_has_reconnect() const {
  return msg_case() == kReconnect;
}
inline bool ServerMessage::has_reconnect() const {
  return _internal_has_reconnect();
}
inline void ServerMessage::set_has_reconnect() {
  _oneof_case_[0] = kReconnect;
}
inline void ServerMessage::clear_reconnect() {
  if (_internal_has_reconnect()) {
    if (GetArena() == nullptr) {
      delete msg_.reconnect_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ServerMessage_Reconnect* ServerMessage::release_reconnect() {
  // @@protoc_insertion_point(field_release:flower_sdk.ServerMessage.reconnect)
  if (_internal_has_reconnect()) {
    clear_has_msg();
      ::flower_sdk::ServerMessage_Reconnect* temp = msg_.reconnect_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.reconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ServerMessage_Reconnect& ServerMessage::_internal_reconnect() const {
  return _internal_has_reconnect()
      ? *msg_.reconnect_
      : reinterpret_cast< ::flower_sdk::ServerMessage_Reconnect&>(::flower_sdk::_ServerMessage_Reconnect_default_instance_);
}
inline const ::flower_sdk::ServerMessage_Reconnect& ServerMessage::reconnect() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.reconnect)
  return _internal_reconnect();
}
inline ::flower_sdk::ServerMessage_Reconnect* ServerMessage::unsafe_arena_release_reconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ServerMessage.reconnect)
  if (_internal_has_reconnect()) {
    clear_has_msg();
    ::flower_sdk::ServerMessage_Reconnect* temp = msg_.reconnect_;
    msg_.reconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_reconnect(::flower_sdk::ServerMessage_Reconnect* reconnect) {
  clear_msg();
  if (reconnect) {
    set_has_reconnect();
    msg_.reconnect_ = reconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ServerMessage.reconnect)
}
inline ::flower_sdk::ServerMessage_Reconnect* ServerMessage::_internal_mutable_reconnect() {
  if (!_internal_has_reconnect()) {
    clear_msg();
    set_has_reconnect();
    msg_.reconnect_ = CreateMaybeMessage< ::flower_sdk::ServerMessage_Reconnect >(GetArena());
  }
  return msg_.reconnect_;
}
inline ::flower_sdk::ServerMessage_Reconnect* ServerMessage::mutable_reconnect() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ServerMessage.reconnect)
  return _internal_mutable_reconnect();
}

// .flower_sdk.ServerMessage.GetParameters get_parameters = 2;
inline bool ServerMessage::_internal_has_get_parameters() const {
  return msg_case() == kGetParameters;
}
inline bool ServerMessage::has_get_parameters() const {
  return _internal_has_get_parameters();
}
inline void ServerMessage::set_has_get_parameters() {
  _oneof_case_[0] = kGetParameters;
}
inline void ServerMessage::clear_get_parameters() {
  if (_internal_has_get_parameters()) {
    if (GetArena() == nullptr) {
      delete msg_.get_parameters_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ServerMessage_GetParameters* ServerMessage::release_get_parameters() {
  // @@protoc_insertion_point(field_release:flower_sdk.ServerMessage.get_parameters)
  if (_internal_has_get_parameters()) {
    clear_has_msg();
      ::flower_sdk::ServerMessage_GetParameters* temp = msg_.get_parameters_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.get_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ServerMessage_GetParameters& ServerMessage::_internal_get_parameters() const {
  return _internal_has_get_parameters()
      ? *msg_.get_parameters_
      : reinterpret_cast< ::flower_sdk::ServerMessage_GetParameters&>(::flower_sdk::_ServerMessage_GetParameters_default_instance_);
}
inline const ::flower_sdk::ServerMessage_GetParameters& ServerMessage::get_parameters() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.get_parameters)
  return _internal_get_parameters();
}
inline ::flower_sdk::ServerMessage_GetParameters* ServerMessage::unsafe_arena_release_get_parameters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ServerMessage.get_parameters)
  if (_internal_has_get_parameters()) {
    clear_has_msg();
    ::flower_sdk::ServerMessage_GetParameters* temp = msg_.get_parameters_;
    msg_.get_parameters_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_get_parameters(::flower_sdk::ServerMessage_GetParameters* get_parameters) {
  clear_msg();
  if (get_parameters) {
    set_has_get_parameters();
    msg_.get_parameters_ = get_parameters;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ServerMessage.get_parameters)
}
inline ::flower_sdk::ServerMessage_GetParameters* ServerMessage::_internal_mutable_get_parameters() {
  if (!_internal_has_get_parameters()) {
    clear_msg();
    set_has_get_parameters();
    msg_.get_parameters_ = CreateMaybeMessage< ::flower_sdk::ServerMessage_GetParameters >(GetArena());
  }
  return msg_.get_parameters_;
}
inline ::flower_sdk::ServerMessage_GetParameters* ServerMessage::mutable_get_parameters() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ServerMessage.get_parameters)
  return _internal_mutable_get_parameters();
}

// .flower_sdk.ServerMessage.FitIns fit_ins = 3;
inline bool ServerMessage::_internal_has_fit_ins() const {
  return msg_case() == kFitIns;
}
inline bool ServerMessage::has_fit_ins() const {
  return _internal_has_fit_ins();
}
inline void ServerMessage::set_has_fit_ins() {
  _oneof_case_[0] = kFitIns;
}
inline void ServerMessage::clear_fit_ins() {
  if (_internal_has_fit_ins()) {
    if (GetArena() == nullptr) {
      delete msg_.fit_ins_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ServerMessage_FitIns* ServerMessage::release_fit_ins() {
  // @@protoc_insertion_point(field_release:flower_sdk.ServerMessage.fit_ins)
  if (_internal_has_fit_ins()) {
    clear_has_msg();
      ::flower_sdk::ServerMessage_FitIns* temp = msg_.fit_ins_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.fit_ins_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ServerMessage_FitIns& ServerMessage::_internal_fit_ins() const {
  return _internal_has_fit_ins()
      ? *msg_.fit_ins_
      : reinterpret_cast< ::flower_sdk::ServerMessage_FitIns&>(::flower_sdk::_ServerMessage_FitIns_default_instance_);
}
inline const ::flower_sdk::ServerMessage_FitIns& ServerMessage::fit_ins() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.fit_ins)
  return _internal_fit_ins();
}
inline ::flower_sdk::ServerMessage_FitIns* ServerMessage::unsafe_arena_release_fit_ins() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ServerMessage.fit_ins)
  if (_internal_has_fit_ins()) {
    clear_has_msg();
    ::flower_sdk::ServerMessage_FitIns* temp = msg_.fit_ins_;
    msg_.fit_ins_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_fit_ins(::flower_sdk::ServerMessage_FitIns* fit_ins) {
  clear_msg();
  if (fit_ins) {
    set_has_fit_ins();
    msg_.fit_ins_ = fit_ins;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ServerMessage.fit_ins)
}
inline ::flower_sdk::ServerMessage_FitIns* ServerMessage::_internal_mutable_fit_ins() {
  if (!_internal_has_fit_ins()) {
    clear_msg();
    set_has_fit_ins();
    msg_.fit_ins_ = CreateMaybeMessage< ::flower_sdk::ServerMessage_FitIns >(GetArena());
  }
  return msg_.fit_ins_;
}
inline ::flower_sdk::ServerMessage_FitIns* ServerMessage::mutable_fit_ins() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ServerMessage.fit_ins)
  return _internal_mutable_fit_ins();
}

// .flower_sdk.ServerMessage.EvaluateIns evaluate_ins = 4;
inline bool ServerMessage::_internal_has_evaluate_ins() const {
  return msg_case() == kEvaluateIns;
}
inline bool ServerMessage::has_evaluate_ins() const {
  return _internal_has_evaluate_ins();
}
inline void ServerMessage::set_has_evaluate_ins() {
  _oneof_case_[0] = kEvaluateIns;
}
inline void ServerMessage::clear_evaluate_ins() {
  if (_internal_has_evaluate_ins()) {
    if (GetArena() == nullptr) {
      delete msg_.evaluate_ins_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ServerMessage_EvaluateIns* ServerMessage::release_evaluate_ins() {
  // @@protoc_insertion_point(field_release:flower_sdk.ServerMessage.evaluate_ins)
  if (_internal_has_evaluate_ins()) {
    clear_has_msg();
      ::flower_sdk::ServerMessage_EvaluateIns* temp = msg_.evaluate_ins_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.evaluate_ins_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ServerMessage_EvaluateIns& ServerMessage::_internal_evaluate_ins() const {
  return _internal_has_evaluate_ins()
      ? *msg_.evaluate_ins_
      : reinterpret_cast< ::flower_sdk::ServerMessage_EvaluateIns&>(::flower_sdk::_ServerMessage_EvaluateIns_default_instance_);
}
inline const ::flower_sdk::ServerMessage_EvaluateIns& ServerMessage::evaluate_ins() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.evaluate_ins)
  return _internal_evaluate_ins();
}
inline ::flower_sdk::ServerMessage_EvaluateIns* ServerMessage::unsafe_arena_release_evaluate_ins() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ServerMessage.evaluate_ins)
  if (_internal_has_evaluate_ins()) {
    clear_has_msg();
    ::flower_sdk::ServerMessage_EvaluateIns* temp = msg_.evaluate_ins_;
    msg_.evaluate_ins_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_evaluate_ins(::flower_sdk::ServerMessage_EvaluateIns* evaluate_ins) {
  clear_msg();
  if (evaluate_ins) {
    set_has_evaluate_ins();
    msg_.evaluate_ins_ = evaluate_ins;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ServerMessage.evaluate_ins)
}
inline ::flower_sdk::ServerMessage_EvaluateIns* ServerMessage::_internal_mutable_evaluate_ins() {
  if (!_internal_has_evaluate_ins()) {
    clear_msg();
    set_has_evaluate_ins();
    msg_.evaluate_ins_ = CreateMaybeMessage< ::flower_sdk::ServerMessage_EvaluateIns >(GetArena());
  }
  return msg_.evaluate_ins_;
}
inline ::flower_sdk::ServerMessage_EvaluateIns* ServerMessage::mutable_evaluate_ins() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ServerMessage.evaluate_ins)
  return _internal_mutable_evaluate_ins();
}

// .flower_sdk.ServerMessage.PropertiesIns properties_ins = 5;
inline bool ServerMessage::_internal_has_properties_ins() const {
  return msg_case() == kPropertiesIns;
}
inline bool ServerMessage::has_properties_ins() const {
  return _internal_has_properties_ins();
}
inline void ServerMessage::set_has_properties_ins() {
  _oneof_case_[0] = kPropertiesIns;
}
inline void ServerMessage::clear_properties_ins() {
  if (_internal_has_properties_ins()) {
    if (GetArena() == nullptr) {
      delete msg_.properties_ins_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ServerMessage_PropertiesIns* ServerMessage::release_properties_ins() {
  // @@protoc_insertion_point(field_release:flower_sdk.ServerMessage.properties_ins)
  if (_internal_has_properties_ins()) {
    clear_has_msg();
      ::flower_sdk::ServerMessage_PropertiesIns* temp = msg_.properties_ins_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.properties_ins_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ServerMessage_PropertiesIns& ServerMessage::_internal_properties_ins() const {
  return _internal_has_properties_ins()
      ? *msg_.properties_ins_
      : reinterpret_cast< ::flower_sdk::ServerMessage_PropertiesIns&>(::flower_sdk::_ServerMessage_PropertiesIns_default_instance_);
}
inline const ::flower_sdk::ServerMessage_PropertiesIns& ServerMessage::properties_ins() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ServerMessage.properties_ins)
  return _internal_properties_ins();
}
inline ::flower_sdk::ServerMessage_PropertiesIns* ServerMessage::unsafe_arena_release_properties_ins() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ServerMessage.properties_ins)
  if (_internal_has_properties_ins()) {
    clear_has_msg();
    ::flower_sdk::ServerMessage_PropertiesIns* temp = msg_.properties_ins_;
    msg_.properties_ins_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_properties_ins(::flower_sdk::ServerMessage_PropertiesIns* properties_ins) {
  clear_msg();
  if (properties_ins) {
    set_has_properties_ins();
    msg_.properties_ins_ = properties_ins;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ServerMessage.properties_ins)
}
inline ::flower_sdk::ServerMessage_PropertiesIns* ServerMessage::_internal_mutable_properties_ins() {
  if (!_internal_has_properties_ins()) {
    clear_msg();
    set_has_properties_ins();
    msg_.properties_ins_ = CreateMaybeMessage< ::flower_sdk::ServerMessage_PropertiesIns >(GetArena());
  }
  return msg_.properties_ins_;
}
inline ::flower_sdk::ServerMessage_PropertiesIns* ServerMessage::mutable_properties_ins() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ServerMessage.properties_ins)
  return _internal_mutable_properties_ins();
}

inline bool ServerMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ServerMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ServerMessage::MsgCase ServerMessage::msg_case() const {
  return ServerMessage::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClientMessage_Disconnect

// .flower_sdk.Reason reason = 1;
inline void ClientMessage_Disconnect::clear_reason() {
  reason_ = 0;
}
inline ::flower_sdk::Reason ClientMessage_Disconnect::_internal_reason() const {
  return static_cast< ::flower_sdk::Reason >(reason_);
}
inline ::flower_sdk::Reason ClientMessage_Disconnect::reason() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.Disconnect.reason)
  return _internal_reason();
}
inline void ClientMessage_Disconnect::_internal_set_reason(::flower_sdk::Reason value) {
  
  reason_ = value;
}
inline void ClientMessage_Disconnect::set_reason(::flower_sdk::Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:flower_sdk.ClientMessage.Disconnect.reason)
}

// -------------------------------------------------------------------

// ClientMessage_ParametersRes

// .flower_sdk.Parameters parameters = 1;
inline bool ClientMessage_ParametersRes::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool ClientMessage_ParametersRes::has_parameters() const {
  return _internal_has_parameters();
}
inline void ClientMessage_ParametersRes::clear_parameters() {
  if (GetArena() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
inline const ::flower_sdk::Parameters& ClientMessage_ParametersRes::_internal_parameters() const {
  const ::flower_sdk::Parameters* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::flower_sdk::Parameters&>(
      ::flower_sdk::_Parameters_default_instance_);
}
inline const ::flower_sdk::Parameters& ClientMessage_ParametersRes::parameters() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.ParametersRes.parameters)
  return _internal_parameters();
}
inline void ClientMessage_ParametersRes::unsafe_arena_set_allocated_parameters(
    ::flower_sdk::Parameters* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ClientMessage.ParametersRes.parameters)
}
inline ::flower_sdk::Parameters* ClientMessage_ParametersRes::release_parameters() {
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::flower_sdk::Parameters* ClientMessage_ParametersRes::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:flower_sdk.ClientMessage.ParametersRes.parameters)
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::flower_sdk::Parameters* ClientMessage_ParametersRes::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::flower_sdk::Parameters>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline ::flower_sdk::Parameters* ClientMessage_ParametersRes::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ClientMessage.ParametersRes.parameters)
  return _internal_mutable_parameters();
}
inline void ClientMessage_ParametersRes::set_allocated_parameters(::flower_sdk::Parameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:flower_sdk.ClientMessage.ParametersRes.parameters)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClientMessage_FitRes

// .flower_sdk.Parameters parameters = 1;
inline bool ClientMessage_FitRes::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool ClientMessage_FitRes::has_parameters() const {
  return _internal_has_parameters();
}
inline void ClientMessage_FitRes::clear_parameters() {
  if (GetArena() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
inline const ::flower_sdk::Parameters& ClientMessage_FitRes::_internal_parameters() const {
  const ::flower_sdk::Parameters* p = parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::flower_sdk::Parameters&>(
      ::flower_sdk::_Parameters_default_instance_);
}
inline const ::flower_sdk::Parameters& ClientMessage_FitRes::parameters() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.FitRes.parameters)
  return _internal_parameters();
}
inline void ClientMessage_FitRes::unsafe_arena_set_allocated_parameters(
    ::flower_sdk::Parameters* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ClientMessage.FitRes.parameters)
}
inline ::flower_sdk::Parameters* ClientMessage_FitRes::release_parameters() {
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::flower_sdk::Parameters* ClientMessage_FitRes::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:flower_sdk.ClientMessage.FitRes.parameters)
  
  ::flower_sdk::Parameters* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::flower_sdk::Parameters* ClientMessage_FitRes::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::flower_sdk::Parameters>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline ::flower_sdk::Parameters* ClientMessage_FitRes::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ClientMessage.FitRes.parameters)
  return _internal_mutable_parameters();
}
inline void ClientMessage_FitRes::set_allocated_parameters(::flower_sdk::Parameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:flower_sdk.ClientMessage.FitRes.parameters)
}

// int64 num_examples = 2;
inline void ClientMessage_FitRes::clear_num_examples() {
  num_examples_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMessage_FitRes::_internal_num_examples() const {
  return num_examples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMessage_FitRes::num_examples() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.FitRes.num_examples)
  return _internal_num_examples();
}
inline void ClientMessage_FitRes::_internal_set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_examples_ = value;
}
inline void ClientMessage_FitRes::set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_examples(value);
  // @@protoc_insertion_point(field_set:flower_sdk.ClientMessage.FitRes.num_examples)
}

// map<string, .flower_sdk.Scalar> metrics = 5;
inline int ClientMessage_FitRes::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ClientMessage_FitRes::metrics_size() const {
  return _internal_metrics_size();
}
inline void ClientMessage_FitRes::clear_metrics() {
  metrics_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ClientMessage_FitRes::_internal_metrics() const {
  return metrics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ClientMessage_FitRes::metrics() const {
  // @@protoc_insertion_point(field_map:flower_sdk.ClientMessage.FitRes.metrics)
  return _internal_metrics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ClientMessage_FitRes::_internal_mutable_metrics() {
  return metrics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ClientMessage_FitRes::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:flower_sdk.ClientMessage.FitRes.metrics)
  return _internal_mutable_metrics();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClientMessage_EvaluateRes

// int64 num_examples = 1;
inline void ClientMessage_EvaluateRes::clear_num_examples() {
  num_examples_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMessage_EvaluateRes::_internal_num_examples() const {
  return num_examples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMessage_EvaluateRes::num_examples() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.EvaluateRes.num_examples)
  return _internal_num_examples();
}
inline void ClientMessage_EvaluateRes::_internal_set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_examples_ = value;
}
inline void ClientMessage_EvaluateRes::set_num_examples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_examples(value);
  // @@protoc_insertion_point(field_set:flower_sdk.ClientMessage.EvaluateRes.num_examples)
}

// float loss = 2;
inline void ClientMessage_EvaluateRes::clear_loss() {
  loss_ = 0;
}
inline float ClientMessage_EvaluateRes::_internal_loss() const {
  return loss_;
}
inline float ClientMessage_EvaluateRes::loss() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.EvaluateRes.loss)
  return _internal_loss();
}
inline void ClientMessage_EvaluateRes::_internal_set_loss(float value) {
  
  loss_ = value;
}
inline void ClientMessage_EvaluateRes::set_loss(float value) {
  _internal_set_loss(value);
  // @@protoc_insertion_point(field_set:flower_sdk.ClientMessage.EvaluateRes.loss)
}

// map<string, .flower_sdk.Scalar> metrics = 4;
inline int ClientMessage_EvaluateRes::_internal_metrics_size() const {
  return metrics_.size();
}
inline int ClientMessage_EvaluateRes::metrics_size() const {
  return _internal_metrics_size();
}
inline void ClientMessage_EvaluateRes::clear_metrics() {
  metrics_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ClientMessage_EvaluateRes::_internal_metrics() const {
  return metrics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ClientMessage_EvaluateRes::metrics() const {
  // @@protoc_insertion_point(field_map:flower_sdk.ClientMessage.EvaluateRes.metrics)
  return _internal_metrics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ClientMessage_EvaluateRes::_internal_mutable_metrics() {
  return metrics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ClientMessage_EvaluateRes::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_map:flower_sdk.ClientMessage.EvaluateRes.metrics)
  return _internal_mutable_metrics();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ClientMessage_PropertiesRes

// map<string, .flower_sdk.Scalar> properties = 1;
inline int ClientMessage_PropertiesRes::_internal_properties_size() const {
  return properties_.size();
}
inline int ClientMessage_PropertiesRes::properties_size() const {
  return _internal_properties_size();
}
inline void ClientMessage_PropertiesRes::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ClientMessage_PropertiesRes::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >&
ClientMessage_PropertiesRes::properties() const {
  // @@protoc_insertion_point(field_map:flower_sdk.ClientMessage.PropertiesRes.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ClientMessage_PropertiesRes::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flower_sdk::Scalar >*
ClientMessage_PropertiesRes::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:flower_sdk.ClientMessage.PropertiesRes.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// ClientMessage

// .flower_sdk.ClientMessage.Disconnect disconnect = 1;
inline bool ClientMessage::_internal_has_disconnect() const {
  return msg_case() == kDisconnect;
}
inline bool ClientMessage::has_disconnect() const {
  return _internal_has_disconnect();
}
inline void ClientMessage::set_has_disconnect() {
  _oneof_case_[0] = kDisconnect;
}
inline void ClientMessage::clear_disconnect() {
  if (_internal_has_disconnect()) {
    if (GetArena() == nullptr) {
      delete msg_.disconnect_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ClientMessage_Disconnect* ClientMessage::release_disconnect() {
  // @@protoc_insertion_point(field_release:flower_sdk.ClientMessage.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
      ::flower_sdk::ClientMessage_Disconnect* temp = msg_.disconnect_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ClientMessage_Disconnect& ClientMessage::_internal_disconnect() const {
  return _internal_has_disconnect()
      ? *msg_.disconnect_
      : reinterpret_cast< ::flower_sdk::ClientMessage_Disconnect&>(::flower_sdk::_ClientMessage_Disconnect_default_instance_);
}
inline const ::flower_sdk::ClientMessage_Disconnect& ClientMessage::disconnect() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.disconnect)
  return _internal_disconnect();
}
inline ::flower_sdk::ClientMessage_Disconnect* ClientMessage::unsafe_arena_release_disconnect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ClientMessage.disconnect)
  if (_internal_has_disconnect()) {
    clear_has_msg();
    ::flower_sdk::ClientMessage_Disconnect* temp = msg_.disconnect_;
    msg_.disconnect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_disconnect(::flower_sdk::ClientMessage_Disconnect* disconnect) {
  clear_msg();
  if (disconnect) {
    set_has_disconnect();
    msg_.disconnect_ = disconnect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ClientMessage.disconnect)
}
inline ::flower_sdk::ClientMessage_Disconnect* ClientMessage::_internal_mutable_disconnect() {
  if (!_internal_has_disconnect()) {
    clear_msg();
    set_has_disconnect();
    msg_.disconnect_ = CreateMaybeMessage< ::flower_sdk::ClientMessage_Disconnect >(GetArena());
  }
  return msg_.disconnect_;
}
inline ::flower_sdk::ClientMessage_Disconnect* ClientMessage::mutable_disconnect() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ClientMessage.disconnect)
  return _internal_mutable_disconnect();
}

// .flower_sdk.ClientMessage.ParametersRes parameters_res = 2;
inline bool ClientMessage::_internal_has_parameters_res() const {
  return msg_case() == kParametersRes;
}
inline bool ClientMessage::has_parameters_res() const {
  return _internal_has_parameters_res();
}
inline void ClientMessage::set_has_parameters_res() {
  _oneof_case_[0] = kParametersRes;
}
inline void ClientMessage::clear_parameters_res() {
  if (_internal_has_parameters_res()) {
    if (GetArena() == nullptr) {
      delete msg_.parameters_res_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ClientMessage_ParametersRes* ClientMessage::release_parameters_res() {
  // @@protoc_insertion_point(field_release:flower_sdk.ClientMessage.parameters_res)
  if (_internal_has_parameters_res()) {
    clear_has_msg();
      ::flower_sdk::ClientMessage_ParametersRes* temp = msg_.parameters_res_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.parameters_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ClientMessage_ParametersRes& ClientMessage::_internal_parameters_res() const {
  return _internal_has_parameters_res()
      ? *msg_.parameters_res_
      : reinterpret_cast< ::flower_sdk::ClientMessage_ParametersRes&>(::flower_sdk::_ClientMessage_ParametersRes_default_instance_);
}
inline const ::flower_sdk::ClientMessage_ParametersRes& ClientMessage::parameters_res() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.parameters_res)
  return _internal_parameters_res();
}
inline ::flower_sdk::ClientMessage_ParametersRes* ClientMessage::unsafe_arena_release_parameters_res() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ClientMessage.parameters_res)
  if (_internal_has_parameters_res()) {
    clear_has_msg();
    ::flower_sdk::ClientMessage_ParametersRes* temp = msg_.parameters_res_;
    msg_.parameters_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_parameters_res(::flower_sdk::ClientMessage_ParametersRes* parameters_res) {
  clear_msg();
  if (parameters_res) {
    set_has_parameters_res();
    msg_.parameters_res_ = parameters_res;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ClientMessage.parameters_res)
}
inline ::flower_sdk::ClientMessage_ParametersRes* ClientMessage::_internal_mutable_parameters_res() {
  if (!_internal_has_parameters_res()) {
    clear_msg();
    set_has_parameters_res();
    msg_.parameters_res_ = CreateMaybeMessage< ::flower_sdk::ClientMessage_ParametersRes >(GetArena());
  }
  return msg_.parameters_res_;
}
inline ::flower_sdk::ClientMessage_ParametersRes* ClientMessage::mutable_parameters_res() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ClientMessage.parameters_res)
  return _internal_mutable_parameters_res();
}

// .flower_sdk.ClientMessage.FitRes fit_res = 3;
inline bool ClientMessage::_internal_has_fit_res() const {
  return msg_case() == kFitRes;
}
inline bool ClientMessage::has_fit_res() const {
  return _internal_has_fit_res();
}
inline void ClientMessage::set_has_fit_res() {
  _oneof_case_[0] = kFitRes;
}
inline void ClientMessage::clear_fit_res() {
  if (_internal_has_fit_res()) {
    if (GetArena() == nullptr) {
      delete msg_.fit_res_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ClientMessage_FitRes* ClientMessage::release_fit_res() {
  // @@protoc_insertion_point(field_release:flower_sdk.ClientMessage.fit_res)
  if (_internal_has_fit_res()) {
    clear_has_msg();
      ::flower_sdk::ClientMessage_FitRes* temp = msg_.fit_res_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.fit_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ClientMessage_FitRes& ClientMessage::_internal_fit_res() const {
  return _internal_has_fit_res()
      ? *msg_.fit_res_
      : reinterpret_cast< ::flower_sdk::ClientMessage_FitRes&>(::flower_sdk::_ClientMessage_FitRes_default_instance_);
}
inline const ::flower_sdk::ClientMessage_FitRes& ClientMessage::fit_res() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.fit_res)
  return _internal_fit_res();
}
inline ::flower_sdk::ClientMessage_FitRes* ClientMessage::unsafe_arena_release_fit_res() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ClientMessage.fit_res)
  if (_internal_has_fit_res()) {
    clear_has_msg();
    ::flower_sdk::ClientMessage_FitRes* temp = msg_.fit_res_;
    msg_.fit_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_fit_res(::flower_sdk::ClientMessage_FitRes* fit_res) {
  clear_msg();
  if (fit_res) {
    set_has_fit_res();
    msg_.fit_res_ = fit_res;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ClientMessage.fit_res)
}
inline ::flower_sdk::ClientMessage_FitRes* ClientMessage::_internal_mutable_fit_res() {
  if (!_internal_has_fit_res()) {
    clear_msg();
    set_has_fit_res();
    msg_.fit_res_ = CreateMaybeMessage< ::flower_sdk::ClientMessage_FitRes >(GetArena());
  }
  return msg_.fit_res_;
}
inline ::flower_sdk::ClientMessage_FitRes* ClientMessage::mutable_fit_res() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ClientMessage.fit_res)
  return _internal_mutable_fit_res();
}

// .flower_sdk.ClientMessage.EvaluateRes evaluate_res = 4;
inline bool ClientMessage::_internal_has_evaluate_res() const {
  return msg_case() == kEvaluateRes;
}
inline bool ClientMessage::has_evaluate_res() const {
  return _internal_has_evaluate_res();
}
inline void ClientMessage::set_has_evaluate_res() {
  _oneof_case_[0] = kEvaluateRes;
}
inline void ClientMessage::clear_evaluate_res() {
  if (_internal_has_evaluate_res()) {
    if (GetArena() == nullptr) {
      delete msg_.evaluate_res_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ClientMessage_EvaluateRes* ClientMessage::release_evaluate_res() {
  // @@protoc_insertion_point(field_release:flower_sdk.ClientMessage.evaluate_res)
  if (_internal_has_evaluate_res()) {
    clear_has_msg();
      ::flower_sdk::ClientMessage_EvaluateRes* temp = msg_.evaluate_res_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.evaluate_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ClientMessage_EvaluateRes& ClientMessage::_internal_evaluate_res() const {
  return _internal_has_evaluate_res()
      ? *msg_.evaluate_res_
      : reinterpret_cast< ::flower_sdk::ClientMessage_EvaluateRes&>(::flower_sdk::_ClientMessage_EvaluateRes_default_instance_);
}
inline const ::flower_sdk::ClientMessage_EvaluateRes& ClientMessage::evaluate_res() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.evaluate_res)
  return _internal_evaluate_res();
}
inline ::flower_sdk::ClientMessage_EvaluateRes* ClientMessage::unsafe_arena_release_evaluate_res() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ClientMessage.evaluate_res)
  if (_internal_has_evaluate_res()) {
    clear_has_msg();
    ::flower_sdk::ClientMessage_EvaluateRes* temp = msg_.evaluate_res_;
    msg_.evaluate_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_evaluate_res(::flower_sdk::ClientMessage_EvaluateRes* evaluate_res) {
  clear_msg();
  if (evaluate_res) {
    set_has_evaluate_res();
    msg_.evaluate_res_ = evaluate_res;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ClientMessage.evaluate_res)
}
inline ::flower_sdk::ClientMessage_EvaluateRes* ClientMessage::_internal_mutable_evaluate_res() {
  if (!_internal_has_evaluate_res()) {
    clear_msg();
    set_has_evaluate_res();
    msg_.evaluate_res_ = CreateMaybeMessage< ::flower_sdk::ClientMessage_EvaluateRes >(GetArena());
  }
  return msg_.evaluate_res_;
}
inline ::flower_sdk::ClientMessage_EvaluateRes* ClientMessage::mutable_evaluate_res() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ClientMessage.evaluate_res)
  return _internal_mutable_evaluate_res();
}

// .flower_sdk.ClientMessage.PropertiesRes properties_res = 5;
inline bool ClientMessage::_internal_has_properties_res() const {
  return msg_case() == kPropertiesRes;
}
inline bool ClientMessage::has_properties_res() const {
  return _internal_has_properties_res();
}
inline void ClientMessage::set_has_properties_res() {
  _oneof_case_[0] = kPropertiesRes;
}
inline void ClientMessage::clear_properties_res() {
  if (_internal_has_properties_res()) {
    if (GetArena() == nullptr) {
      delete msg_.properties_res_;
    }
    clear_has_msg();
  }
}
inline ::flower_sdk::ClientMessage_PropertiesRes* ClientMessage::release_properties_res() {
  // @@protoc_insertion_point(field_release:flower_sdk.ClientMessage.properties_res)
  if (_internal_has_properties_res()) {
    clear_has_msg();
      ::flower_sdk::ClientMessage_PropertiesRes* temp = msg_.properties_res_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.properties_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flower_sdk::ClientMessage_PropertiesRes& ClientMessage::_internal_properties_res() const {
  return _internal_has_properties_res()
      ? *msg_.properties_res_
      : reinterpret_cast< ::flower_sdk::ClientMessage_PropertiesRes&>(::flower_sdk::_ClientMessage_PropertiesRes_default_instance_);
}
inline const ::flower_sdk::ClientMessage_PropertiesRes& ClientMessage::properties_res() const {
  // @@protoc_insertion_point(field_get:flower_sdk.ClientMessage.properties_res)
  return _internal_properties_res();
}
inline ::flower_sdk::ClientMessage_PropertiesRes* ClientMessage::unsafe_arena_release_properties_res() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flower_sdk.ClientMessage.properties_res)
  if (_internal_has_properties_res()) {
    clear_has_msg();
    ::flower_sdk::ClientMessage_PropertiesRes* temp = msg_.properties_res_;
    msg_.properties_res_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_properties_res(::flower_sdk::ClientMessage_PropertiesRes* properties_res) {
  clear_msg();
  if (properties_res) {
    set_has_properties_res();
    msg_.properties_res_ = properties_res;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flower_sdk.ClientMessage.properties_res)
}
inline ::flower_sdk::ClientMessage_PropertiesRes* ClientMessage::_internal_mutable_properties_res() {
  if (!_internal_has_properties_res()) {
    clear_msg();
    set_has_properties_res();
    msg_.properties_res_ = CreateMaybeMessage< ::flower_sdk::ClientMessage_PropertiesRes >(GetArena());
  }
  return msg_.properties_res_;
}
inline ::flower_sdk::ClientMessage_PropertiesRes* ClientMessage::mutable_properties_res() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.ClientMessage.properties_res)
  return _internal_mutable_properties_res();
}

inline bool ClientMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ClientMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ClientMessage::MsgCase ClientMessage::msg_case() const {
  return ClientMessage::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Scalar

// double double = 1;
inline bool Scalar::_internal_has_double_() const {
  return scalar_case() == kDouble;
}
inline bool Scalar::has_double_() const {
  return _internal_has_double_();
}
inline void Scalar::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void Scalar::clear_double_() {
  if (_internal_has_double_()) {
    scalar_.double__ = 0;
    clear_has_scalar();
  }
}
inline double Scalar::_internal_double_() const {
  if (_internal_has_double_()) {
    return scalar_.double__;
  }
  return 0;
}
inline void Scalar::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_scalar();
    set_has_double_();
  }
  scalar_.double__ = value;
}
inline double Scalar::double_() const {
  // @@protoc_insertion_point(field_get:flower_sdk.Scalar.double)
  return _internal_double_();
}
inline void Scalar::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:flower_sdk.Scalar.double)
}

// sint64 sint64 = 2;
inline bool Scalar::_internal_has_sint64() const {
  return scalar_case() == kSint64;
}
inline bool Scalar::has_sint64() const {
  return _internal_has_sint64();
}
inline void Scalar::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void Scalar::clear_sint64() {
  if (_internal_has_sint64()) {
    scalar_.sint64_ = PROTOBUF_LONGLONG(0);
    clear_has_scalar();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::_internal_sint64() const {
  if (_internal_has_sint64()) {
    return scalar_.sint64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Scalar::_internal_set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64()) {
    clear_scalar();
    set_has_sint64();
  }
  scalar_.sint64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Scalar::sint64() const {
  // @@protoc_insertion_point(field_get:flower_sdk.Scalar.sint64)
  return _internal_sint64();
}
inline void Scalar::set_sint64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:flower_sdk.Scalar.sint64)
}

// bool bool = 3;
inline bool Scalar::_internal_has_bool_() const {
  return scalar_case() == kBool;
}
inline bool Scalar::has_bool_() const {
  return _internal_has_bool_();
}
inline void Scalar::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void Scalar::clear_bool_() {
  if (_internal_has_bool_()) {
    scalar_.bool__ = false;
    clear_has_scalar();
  }
}
inline bool Scalar::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return scalar_.bool__;
  }
  return false;
}
inline void Scalar::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_scalar();
    set_has_bool_();
  }
  scalar_.bool__ = value;
}
inline bool Scalar::bool_() const {
  // @@protoc_insertion_point(field_get:flower_sdk.Scalar.bool)
  return _internal_bool_();
}
inline void Scalar::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:flower_sdk.Scalar.bool)
}

// string string = 4;
inline bool Scalar::_internal_has_string() const {
  return scalar_case() == kString;
}
inline bool Scalar::has_string() const {
  return _internal_has_string();
}
inline void Scalar::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void Scalar::clear_string() {
  if (_internal_has_string()) {
    scalar_.string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_scalar();
  }
}
inline const std::string& Scalar::string() const {
  // @@protoc_insertion_point(field_get:flower_sdk.Scalar.string)
  return _internal_string();
}
inline void Scalar::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:flower_sdk.Scalar.string)
}
inline std::string* Scalar::mutable_string() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.Scalar.string)
  return _internal_mutable_string();
}
inline const std::string& Scalar::_internal_string() const {
  if (_internal_has_string()) {
    return scalar_.string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Scalar::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_scalar();
    set_has_string();
    scalar_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scalar::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:flower_sdk.Scalar.string)
  if (!_internal_has_string()) {
    clear_scalar();
    set_has_string();
    scalar_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:flower_sdk.Scalar.string)
}
inline void Scalar::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_scalar();
    set_has_string();
    scalar_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:flower_sdk.Scalar.string)
}
inline void Scalar::set_string(const char* value,
                             size_t size) {
  if (!_internal_has_string()) {
    clear_scalar();
    set_has_string();
    scalar_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.string_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:flower_sdk.Scalar.string)
}
inline std::string* Scalar::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_scalar();
    set_has_string();
    scalar_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return scalar_.string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scalar::release_string() {
  // @@protoc_insertion_point(field_release:flower_sdk.Scalar.string)
  if (_internal_has_string()) {
    clear_has_scalar();
    return scalar_.string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Scalar::set_allocated_string(std::string* string) {
  if (has_scalar()) {
    clear_scalar();
  }
  if (string != nullptr) {
    set_has_string();
    scalar_.string_.UnsafeSetDefault(string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flower_sdk.Scalar.string)
}

// bytes bytes = 5;
inline bool Scalar::_internal_has_bytes() const {
  return scalar_case() == kBytes;
}
inline bool Scalar::has_bytes() const {
  return _internal_has_bytes();
}
inline void Scalar::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
inline void Scalar::clear_bytes() {
  if (_internal_has_bytes()) {
    scalar_.bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_scalar();
  }
}
inline const std::string& Scalar::bytes() const {
  // @@protoc_insertion_point(field_get:flower_sdk.Scalar.bytes)
  return _internal_bytes();
}
inline void Scalar::set_bytes(const std::string& value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:flower_sdk.Scalar.bytes)
}
inline std::string* Scalar::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:flower_sdk.Scalar.bytes)
  return _internal_mutable_bytes();
}
inline const std::string& Scalar::_internal_bytes() const {
  if (_internal_has_bytes()) {
    return scalar_.bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Scalar::_internal_set_bytes(const std::string& value) {
  if (!_internal_has_bytes()) {
    clear_scalar();
    set_has_bytes();
    scalar_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Scalar::set_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:flower_sdk.Scalar.bytes)
  if (!_internal_has_bytes()) {
    clear_scalar();
    set_has_bytes();
    scalar_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.bytes_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:flower_sdk.Scalar.bytes)
}
inline void Scalar::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bytes()) {
    clear_scalar();
    set_has_bytes();
    scalar_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:flower_sdk.Scalar.bytes)
}
inline void Scalar::set_bytes(const void* value,
                             size_t size) {
  if (!_internal_has_bytes()) {
    clear_scalar();
    set_has_bytes();
    scalar_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  scalar_.bytes_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:flower_sdk.Scalar.bytes)
}
inline std::string* Scalar::_internal_mutable_bytes() {
  if (!_internal_has_bytes()) {
    clear_scalar();
    set_has_bytes();
    scalar_.bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return scalar_.bytes_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Scalar::release_bytes() {
  // @@protoc_insertion_point(field_release:flower_sdk.Scalar.bytes)
  if (_internal_has_bytes()) {
    clear_has_scalar();
    return scalar_.bytes_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Scalar::set_allocated_bytes(std::string* bytes) {
  if (has_scalar()) {
    clear_scalar();
  }
  if (bytes != nullptr) {
    set_has_bytes();
    scalar_.bytes_.UnsafeSetDefault(bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flower_sdk.Scalar.bytes)
}

inline bool Scalar::has_scalar() const {
  return scalar_case() != SCALAR_NOT_SET;
}
inline void Scalar::clear_has_scalar() {
  _oneof_case_[0] = SCALAR_NOT_SET;
}
inline Scalar::ScalarCase Scalar::scalar_case() const {
  return Scalar::ScalarCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace flower_sdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flower_sdk::Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flower_sdk::Reason>() {
  return ::flower_sdk::Reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_5ftransport_2eproto
